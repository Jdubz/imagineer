# Nginx Reverse Proxy Configuration for Imagineer API
# Optional but recommended for production

upstream imagineer_api {
    server localhost:10050;
    keepalive 32;
}

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=auth_limit:10m rate=5r/m;
limit_req_zone $binary_remote_addr zone=general_limit:10m rate=100r/m;

# Connection limiting
limit_conn_zone $binary_remote_addr zone=conn_limit:10m;

server {
    listen 80;
    server_name api.your-domain.com;

    # Redirect HTTP to HTTPS (uncomment when SSL is set up)
    # return 301 https://$server_name$request_uri;
}

server {
    # Comment out this block until SSL is configured
    listen 80;
    # Uncomment these when SSL is ready:
    # listen 443 ssl http2;
    # ssl_certificate /etc/letsencrypt/live/api.your-domain.com/fullchain.pem;
    # ssl_certificate_key /etc/letsencrypt/live/api.your-domain.com/privkey.pem;
    # ssl_protocols TLSv1.2 TLSv1.3;
    # ssl_ciphers HIGH:!aNULL:!MD5;
    # ssl_prefer_server_ciphers on;
    # ssl_session_cache shared:SSL:10m;
    # ssl_session_timeout 10m;

    server_name api.your-domain.com;

    # Security headers
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;

    # CORS headers (adjust origins as needed)
    add_header Access-Control-Allow-Origin "$http_origin" always;
    add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
    add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With" always;
    add_header Access-Control-Allow-Credentials "true" always;

    # Max request size (for image uploads if needed)
    client_max_body_size 10M;

    # Timeouts
    proxy_connect_timeout 300s;
    proxy_send_timeout 300s;
    proxy_read_timeout 300s;

    # Connection limits
    limit_conn conn_limit 10;

    # Logging
    access_log /var/log/nginx/imagineer-access.log;
    error_log /var/log/nginx/imagineer-error.log warn;

    # Health check endpoint (no rate limiting)
    location /api/health {
        proxy_pass http://imagineer_api;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Auth endpoints (strict rate limiting)
    location /api/auth/ {
        limit_req zone=auth_limit burst=2 nodelay;
        limit_req_status 429;

        proxy_pass http://imagineer_api;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Generation endpoints (moderate rate limiting)
    location /api/generate {
        limit_req zone=api_limit burst=5 nodelay;
        limit_req_status 429;

        proxy_pass http://imagineer_api;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # All other API endpoints (general rate limiting)
    location /api/ {
        limit_req zone=general_limit burst=20 nodelay;
        limit_req_status 429;

        proxy_pass http://imagineer_api;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Block common attack patterns
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Custom error pages
    error_page 429 /429.html;
    location = /429.html {
        internal;
        return 429 '{"error": "Rate limit exceeded. Please try again later."}';
        add_header Content-Type application/json always;
    }

    error_page 502 503 504 /50x.html;
    location = /50x.html {
        internal;
        return 502 '{"error": "Service temporarily unavailable. Please try again later."}';
        add_header Content-Type application/json always;
    }
}

"""
Imagineer API Server
Flask-based REST API for managing image generation
"""

from flask import Flask, request, jsonify, send_from_directory
from flask_cors import CORS
import yaml
import json
import os
import sys
from pathlib import Path
from datetime import datetime
import subprocess
import threading
import queue

# Add parent directory to path for imports
sys.path.insert(0, str(Path(__file__).parent.parent))

app = Flask(__name__, static_folder='static')
CORS(app)

# Configuration
PROJECT_ROOT = Path(__file__).parent.parent
CONFIG_PATH = PROJECT_ROOT / 'config.yaml'
VENV_PYTHON = PROJECT_ROOT / 'venv' / 'bin' / 'python'
GENERATE_SCRIPT = PROJECT_ROOT / 'examples' / 'generate.py'

# Job queue
job_queue = queue.Queue()
job_history = []
current_job = None


def load_config():
    """Load config.yaml"""
    with open(CONFIG_PATH, 'r') as f:
        return yaml.safe_load(f)


def save_config(config):
    """Save config.yaml"""
    with open(CONFIG_PATH, 'w') as f:
        yaml.dump(config, f, default_flow_style=False, sort_keys=False)


def process_jobs():
    """Background worker to process generation jobs"""
    global current_job

    while True:
        job = job_queue.get()
        if job is None:
            break

        current_job = job
        job['status'] = 'running'
        job['started_at'] = datetime.now().isoformat()

        try:
            # Build command
            cmd = [
                str(VENV_PYTHON),
                str(GENERATE_SCRIPT),
                '--prompt', job['prompt']
            ]

            # Add optional parameters
            if job.get('seed'):
                cmd.extend(['--seed', str(job['seed'])])
            if job.get('steps'):
                cmd.extend(['--steps', str(job['steps'])])
            if job.get('width'):
                cmd.extend(['--width', str(job['width'])])
            if job.get('height'):
                cmd.extend(['--height', str(job['height'])])
            if job.get('guidance_scale'):
                cmd.extend(['--guidance-scale', str(job['guidance_scale'])])
            if job.get('negative_prompt'):
                cmd.extend(['--negative-prompt', job['negative_prompt']])

            # Run generation
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                cwd=PROJECT_ROOT
            )

            if result.returncode == 0:
                job['status'] = 'completed'
                job['output'] = result.stdout
                # Extract output path from stdout
                for line in result.stdout.split('\n'):
                    if 'Image saved to:' in line:
                        job['output_path'] = line.split('Image saved to:')[1].strip()
            else:
                job['status'] = 'failed'
                job['error'] = result.stderr

        except Exception as e:
            job['status'] = 'failed'
            job['error'] = str(e)

        job['completed_at'] = datetime.now().isoformat()
        job_history.append(job)
        current_job = None
        job_queue.task_done()


# Start background worker
worker_thread = threading.Thread(target=process_jobs, daemon=True)
worker_thread.start()


@app.route('/')
def index():
    """Serve the web UI"""
    return send_from_directory('static', 'index.html')


@app.route('/api/config', methods=['GET'])
def get_config():
    """Get current configuration"""
    config = load_config()
    return jsonify(config)


@app.route('/api/config', methods=['PUT'])
def update_config():
    """Update configuration"""
    try:
        new_config = request.json
        save_config(new_config)
        return jsonify({'success': True, 'message': 'Configuration updated'})
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 400


@app.route('/api/config/generation', methods=['PUT'])
def update_generation_config():
    """Update just the generation settings"""
    try:
        config = load_config()
        config['generation'].update(request.json)
        save_config(config)
        return jsonify({'success': True, 'config': config['generation']})
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 400


@app.route('/api/generate', methods=['POST'])
def generate():
    """Submit a new image generation job"""
    try:
        data = request.json

        if not data.get('prompt'):
            return jsonify({'success': False, 'error': 'Prompt is required'}), 400

        job = {
            'id': len(job_history) + job_queue.qsize() + 1,
            'prompt': data['prompt'],
            'seed': data.get('seed'),
            'steps': data.get('steps'),
            'width': data.get('width'),
            'height': data.get('height'),
            'guidance_scale': data.get('guidance_scale'),
            'negative_prompt': data.get('negative_prompt'),
            'status': 'queued',
            'submitted_at': datetime.now().isoformat()
        }

        job_queue.put(job)

        return jsonify({
            'success': True,
            'job': job,
            'queue_position': job_queue.qsize()
        })

    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 400


@app.route('/api/jobs', methods=['GET'])
def get_jobs():
    """Get job history and current queue"""
    queue_list = list(job_queue.queue)

    return jsonify({
        'current': current_job,
        'queued': queue_list,
        'history': job_history[-50:]  # Last 50 jobs
    })


@app.route('/api/jobs/<int:job_id>', methods=['GET'])
def get_job(job_id):
    """Get specific job details"""
    # Check current job
    if current_job and current_job['id'] == job_id:
        return jsonify(current_job)

    # Check queue
    for job in job_queue.queue:
        if job['id'] == job_id:
            return jsonify(job)

    # Check history
    for job in job_history:
        if job['id'] == job_id:
            return jsonify(job)

    return jsonify({'error': 'Job not found'}), 404


@app.route('/api/outputs', methods=['GET'])
def list_outputs():
    """List generated images"""
    try:
        config = load_config()
        output_dir = Path(config['output']['directory'])

        images = []
        if output_dir.exists():
            for img_file in sorted(output_dir.glob('*.png'), key=os.path.getmtime, reverse=True):
                metadata_file = img_file.with_suffix('.json')
                metadata = {}

                if metadata_file.exists():
                    with open(metadata_file, 'r') as f:
                        metadata = json.load(f)

                images.append({
                    'filename': img_file.name,
                    'path': str(img_file),
                    'size': img_file.stat().st_size,
                    'created': datetime.fromtimestamp(img_file.stat().st_mtime).isoformat(),
                    'metadata': metadata
                })

        return jsonify({'images': images[:100]})  # Last 100 images

    except Exception as e:
        return jsonify({'error': str(e)}), 500


@app.route('/api/outputs/<path:filename>')
def serve_output(filename):
    """Serve a generated image"""
    config = load_config()
    output_dir = config['output']['directory']
    return send_from_directory(output_dir, filename)


@app.route('/api/health', methods=['GET'])
def health():
    """Health check endpoint"""
    return jsonify({
        'status': 'ok',
        'queue_size': job_queue.qsize(),
        'current_job': current_job is not None,
        'total_completed': len(job_history)
    })


if __name__ == '__main__':
    print("=" * 50)
    print("Imagineer API Server")
    print("=" * 50)
    print(f"Config: {CONFIG_PATH}")
    print(f"Output: {load_config()['output']['directory']}")
    print("")
    print("Starting server on http://0.0.0.0:5000")
    print("Access from any device on your network!")
    print("=" * 50)

    app.run(host='0.0.0.0', port=5000, debug=True)

name: Comprehensive Tests

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.12'

jobs:
  # Backend Tests
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || contains(github.event.head_commit.modified, 'server/') || contains(github.event.head_commit.modified, 'src/') || contains(github.event.head_commit.modified, 'examples/') || contains(github.event.head_commit.modified, 'requirements.txt') || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov black flake8 isort

      - name: Check code formatting (black)
        run: black --check server/ src/ examples/

      - name: Check imports (isort)
        run: isort --check-only server/ src/ examples/

      - name: Lint (flake8)
        run: flake8 server/ src/ examples/ --max-line-length=100 --extend-ignore=E203,W503,C901,E501

      - name: Run backend tests
        run: pytest tests/backend/ -v --cov=server --cov=src --cov-report=xml --cov-report=html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: backend
          name: backend-coverage

      - name: Backend test summary
        run: |
          echo "## Backend Tests ✅" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Python Version:** ${{ env.PYTHON_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "**Linting:** Passed" >> $GITHUB_STEP_SUMMARY
          echo "**Formatting:** Passed" >> $GITHUB_STEP_SUMMARY
          echo "**Tests:** Passed" >> $GITHUB_STEP_SUMMARY

  # Frontend Tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || contains(github.event.head_commit.modified, 'web/') || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Install dependencies
        working-directory: ./web
        run: npm ci

      - name: Run linter
        working-directory: ./web
        run: npm run lint

      - name: Run frontend tests
        working-directory: ./web
        run: npm test -- --run --coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./web/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

      - name: Frontend test summary
        run: |
          echo "## Frontend Tests ✅" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Node Version:** ${{ env.NODE_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "**Linting:** Passed" >> $GITHUB_STEP_SUMMARY
          echo "**Tests:** Passed" >> $GITHUB_STEP_SUMMARY

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    needs: [backend-tests, frontend-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Install frontend dependencies
        working-directory: ./web
        run: npm ci

      - name: Build frontend
        working-directory: ./web
        run: npm run build

      - name: Start backend server
        run: |
          # Start backend in background
          python server/api.py &
          BACKEND_PID=$!
          echo "BACKEND_PID=$BACKEND_PID" >> $GITHUB_ENV
          
          # Wait for backend to start
          sleep 10
          
          # Check if backend is running
          curl -f http://localhost:10050/api/health || exit 1

      - name: Run integration tests
        run: |
          # Test API endpoints
          curl -f http://localhost:10050/api/health
          curl -f http://localhost:10050/api/albums
          
          # Test frontend build
          test -f public/index.html
          test -d public/assets
          
          echo "✅ Integration tests passed"

      - name: Stop backend server
        if: always()
        run: |
          if [ ! -z "$BACKEND_PID" ]; then
            kill $BACKEND_PID || true
          fi

      - name: Integration test summary
        run: |
          echo "## Integration Tests ✅" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Backend API:** Responding" >> $GITHUB_STEP_SUMMARY
          echo "**Frontend Build:** Successful" >> $GITHUB_STEP_SUMMARY
          echo "**End-to-End:** Passed" >> $GITHUB_STEP_SUMMARY

  # Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit safety

      - name: Install frontend dependencies
        working-directory: ./web
        run: npm ci

      - name: Run Python security scan
        run: |
          bandit -r server/ src/ examples/ -f json -o bandit-report.json || true
          safety check --json --output safety-report.json || true

      - name: Run Node.js security audit
        working-directory: ./web
        run: |
          npm audit --audit-level=moderate --json > ../npm-audit-report.json || true

      - name: Security test summary
        run: |
          echo "## Security Tests ✅" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Python Security:** Scanned" >> $GITHUB_STEP_SUMMARY
          echo "**Node.js Security:** Audited" >> $GITHUB_STEP_SUMMARY
          echo "**Dependencies:** Checked" >> $GITHUB_STEP_SUMMARY

  # Build Tests
  build-tests:
    name: Build Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install frontend dependencies
        working-directory: ./web
        run: npm ci

      - name: Test backend build
        run: |
          # Test that backend can start
          python -c "import server.api; print('✅ Backend imports successfully')"
          python -c "from server.database import db; print('✅ Database models load successfully')"

      - name: Test frontend build
        working-directory: ./web
        run: |
          npm run build
          test -f ../public/index.html
          test -d ../public/assets
          echo "✅ Frontend builds successfully"

      - name: Test versioning system
        run: |
          python scripts/version.py current
          python scripts/version.py build-info
          echo "✅ Versioning system works"

      - name: Build test summary
        run: |
          echo "## Build Tests ✅" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Backend Build:** Successful" >> $GITHUB_STEP_SUMMARY
          echo "**Frontend Build:** Successful" >> $GITHUB_STEP_SUMMARY
          echo "**Versioning:** Working" >> $GITHUB_STEP_SUMMARY

  # Test Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [backend-tests, frontend-tests, integration-tests, security-tests, build-tests]

    steps:
      - name: Generate test summary
        run: |
          echo "## 🧪 Comprehensive Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Backend Tests | ${{ needs.backend-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend Tests | ${{ needs.frontend-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Tests | ${{ needs.security-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Tests | ${{ needs.build-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Coverage Reports" >> $GITHUB_STEP_SUMMARY
          echo "- Backend coverage available in backend-tests job" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend coverage available in frontend-tests job" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Review any failed tests above" >> $GITHUB_STEP_SUMMARY
          echo "2. Check coverage reports for areas needing attention" >> $GITHUB_STEP_SUMMARY
          echo "3. Address security findings if any" >> $GITHUB_STEP_SUMMARY
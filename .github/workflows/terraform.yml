name: Terraform Infrastructure

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform.yml'
  workflow_dispatch:

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        env:
          TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          TF_VAR_domain: ${{ secrets.CLOUDFLARE_DOMAIN }}
          TF_VAR_tunnel_id: ${{ secrets.CLOUDFLARE_TUNNEL_ID }}
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - name: Comment PR
        uses: actions/github-script@v8
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        env:
          TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          TF_VAR_domain: ${{ secrets.CLOUDFLARE_DOMAIN }}
          TF_VAR_tunnel_id: ${{ secrets.CLOUDFLARE_TUNNEL_ID }}
        run: terraform apply -auto-approve -input=false

      - name: Deployment summary
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "## Infrastructure Deployed! üåê" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Cloudflare resources have been updated**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Resources Managed:" >> $GITHUB_STEP_SUMMARY
          echo "- DNS records" >> $GITHUB_STEP_SUMMARY
          echo "- Rate limiting rules" >> $GITHUB_STEP_SUMMARY
          echo "- WAF custom rules" >> $GITHUB_STEP_SUMMARY
          echo "- Page rules" >> $GITHUB_STEP_SUMMARY

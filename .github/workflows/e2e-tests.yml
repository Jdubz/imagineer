name: End-to-End Tests

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.12'

jobs:
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Install frontend dependencies
        working-directory: ./web
        run: npm ci

      - name: Build frontend
        working-directory: ./web
        run: npm run build

      - name: Start backend server
        run: |
          # Start backend in background
          python server/api.py &
          BACKEND_PID=$!
          echo "BACKEND_PID=$BACKEND_PID" >> $GITHUB_ENV
          
          # Wait for backend to start
          sleep 15
          
          # Check if backend is running
          curl -f http://localhost:10050/api/health || exit 1
          echo "✅ Backend server started"

      - name: Test API endpoints
        run: |
          echo "Testing API endpoints..."
          
          # Test health endpoint
          curl -f http://localhost:10050/api/health
          echo "✅ Health endpoint working"
          
          # Test albums endpoint
          curl -f http://localhost:10050/api/albums
          echo "✅ Albums endpoint working"
          
          # Test images endpoint
          curl -f http://localhost:10050/api/images
          echo "✅ Images endpoint working"
          
          # Test training endpoint
          curl -f http://localhost:10050/api/training/albums
          echo "✅ Training endpoint working"

      - name: Test frontend build
        run: |
          echo "Testing frontend build..."
          
          # Check if index.html exists
          test -f public/index.html
          echo "✅ index.html exists"
          
          # Check if assets directory exists
          test -d public/assets
          echo "✅ Assets directory exists"
          
          # Check if versioned assets exist
          ASSET_COUNT=$(find public/assets -name "*.js" -o -name "*.css" | wc -l)
          if [ $ASSET_COUNT -gt 0 ]; then
            echo "✅ Found $ASSET_COUNT versioned assets"
          else
            echo "❌ No versioned assets found"
            exit 1
          fi

      - name: Test versioning system
        run: |
          echo "Testing versioning system..."
          
          # Test version script
          python scripts/version.py current
          python scripts/version.py build-info
          echo "✅ Versioning system working"

      - name: Test deployment scripts
        run: |
          echo "Testing deployment scripts..."
          
          # Test deployment checker
          ./scripts/deploy/check-deployment.sh
          echo "✅ Deployment checker working"

      - name: Stop backend server
        if: always()
        run: |
          if [ ! -z "$BACKEND_PID" ]; then
            kill $BACKEND_PID || true
            echo "✅ Backend server stopped"
          fi

      - name: E2E test summary
        run: |
          echo "## End-to-End Tests ✅" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Backend API:** All endpoints responding" >> $GITHUB_STEP_SUMMARY
          echo "**Frontend Build:** Successful with versioned assets" >> $GITHUB_STEP_SUMMARY
          echo "**Versioning System:** Working" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Scripts:** Functional" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Health endpoint" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Albums endpoint" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Images endpoint" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Training endpoint" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Frontend build" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Versioned assets" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Versioning system" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Deployment scripts" >> $GITHUB_STEP_SUMMARY
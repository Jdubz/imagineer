name: CI

on:
  pull_request:
  push:
    branches:
      - main

jobs:
  frontend-unit-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: web/package-lock.json

      - name: Install dependencies
        working-directory: web
        run: npm ci

      - name: Lint
        working-directory: web
        run: npm run lint

      - name: Type check
        working-directory: web
        run: npm run tsc

      - name: Run unit tests
        working-directory: web
        run: npm test -- --run --coverage

  backend-unit-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black flake8

      - name: Format check (black)
        run: black --check server src tests

      - name: Lint (flake8)
        run: flake8 server src tests

      - name: Run unit tests
        run: pytest --maxfail=1 --disable-warnings -v tests/backend
        env:
          IMAGINEER_OUTPUTS_DIR: /tmp/imagineer/outputs
          IMAGINEER_DATASET_ROOT: /tmp/imagineer/data/training
          IMAGINEER_MODEL_CACHE_DIR: /tmp/imagineer/models

  deploy-frontend:
    runs-on: ubuntu-latest
    needs:
      - frontend-unit-tests
      - backend-unit-tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: web/package-lock.json

      - name: Install frontend dependencies
        working-directory: web
        run: npm ci

      - name: Build production bundle
        working-directory: web
        run: npm run deploy:build

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Configure Firebase credentials
        env:
          FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
        run: |2
          set -euo pipefail
          CREDS_PATH="${RUNNER_TEMP}/firebase-service-account.json"
          python <<'PYCODE'
          import base64
          import json
          import os
          import sys

          raw = os.environ.get("FIREBASE_SERVICE_ACCOUNT", "").strip()
          if not raw:
              sys.exit("FIREBASE_SERVICE_ACCOUNT secret is empty")

          def write_credentials(data: str) -> None:
              path = os.environ["RUNNER_TEMP"] + "/firebase-service-account.json"
              with open(path, "w", encoding="utf-8") as fh:
                  fh.write(data)

          try:
              json.loads(raw)
          except json.JSONDecodeError:
              try:
                  decoded = base64.b64decode(raw).decode("utf-8")
                  json.loads(decoded)
                  write_credentials(decoded)
              except Exception as exc:  # pylint: disable=broad-except
                  raise SystemExit(f"Unable to decode FIREBASE_SERVICE_ACCOUNT: {exc}")
          else:
              write_credentials(raw)
          PYCODE
          echo "GOOGLE_APPLICATION_CREDENTIALS=${CREDS_PATH}" >> "${GITHUB_ENV}"

      - name: Deploy to Firebase Hosting
        run: firebase deploy --only hosting:imagineer --project static-sites-257923

  deploy-backend:
    runs-on: ubuntu-latest
    needs:
      - backend-unit-tests
      - deploy-frontend
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Deploy backend via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -euo pipefail
            cd /home/jdubz/Development/imagineer
            if [ ! -x scripts/deploy/backend-release.sh ]; then
              echo "backend-release.sh missing or not executable" >&2
              exit 1
            fi
            ./scripts/deploy/backend-release.sh
